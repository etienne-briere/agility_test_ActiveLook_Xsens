
//  WARNING: COPYRIGHT (C) 2023 MOVELLA TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO A RESTRICTED LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MovellaDotPcSdk {

public class XsDotUsbDevice : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsDotUsbDevice(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsDotUsbDevice obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsDotUsbDevice() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          movelladot_pc_sdkPINVOKE.delete_XsDotUsbDevice(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsString productCode() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_productCode(swigCPtr), true);
    return ret;
  }

  public XsString bluetoothAddress() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_bluetoothAddress(swigCPtr), true);
    return ret;
  }

  public XsString deviceTagName() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_deviceTagName(swigCPtr), true);
    return ret;
  }

  public uint serialNumber() {
    uint ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_serialNumber(swigCPtr);
    return ret;
  }

  public bool eraseFlash() {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_eraseFlash(swigCPtr);
    return ret;
  }

  public int recordingCount() {
    int ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_recordingCount(swigCPtr);
    return ret;
  }

  public int usedFlashSizeTotal() {
    int ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_usedFlashSizeTotal(swigCPtr);
    return ret;
  }

  public XsRecordingInfo getRecordingInfo(int recordingIndex) {
    XsRecordingInfo ret = new XsRecordingInfo(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_getRecordingInfo(swigCPtr, recordingIndex), true);
    return ret;
  }

  public bool selectExportData(XsIntArray selectedDataFields) {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_selectExportData(swigCPtr, XsIntArray.getCPtr(selectedDataFields));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool startExportRecording(int recordingIndex) {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_startExportRecording(swigCPtr, recordingIndex);
    return ret;
  }

  public bool stopExportRecording() {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_stopExportRecording(swigCPtr);
    return ret;
  }

  public bool enableLogging(XsString filename) {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_enableLogging(swigCPtr, XsString.getCPtr(filename));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool disableLogging() {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_disableLogging(swigCPtr);
    return ret;
  }

  public void setLogOptions(XsLogOptions options) {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_setLogOptions(swigCPtr, (int)options);
  }

  public XsString portName() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_portName(swigCPtr), true);
    return ret;
  }

  public XsPortInfo portInfo() {
    XsPortInfo ret = new XsPortInfo(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_portInfo(swigCPtr), true);
    return ret;
  }

  public XsDeviceId deviceId() {
    XsDeviceId ret = new XsDeviceId(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_deviceId(swigCPtr), true);
    return ret;
  }

  public XsResultValue lastResult() {
    XsResultValue ret = (XsResultValue)movelladot_pc_sdkPINVOKE.XsDotUsbDevice_lastResult(swigCPtr);
    return ret;
  }

  public XsString lastResultText() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_lastResultText(swigCPtr), true);
    return ret;
  }

  public XsDeviceState deviceState() {
    XsDeviceState ret = (XsDeviceState)movelladot_pc_sdkPINVOKE.XsDotUsbDevice_deviceState(swigCPtr);
    return ret;
  }

  public XsVersion firmwareVersion() {
    XsVersion ret = new XsVersion(movelladot_pc_sdkPINVOKE.XsDotUsbDevice_firmwareVersion(swigCPtr), true);
    return ret;
  }

  public void addRef() {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_addRef(swigCPtr);
  }

  public void removeRef() {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_removeRef(swigCPtr);
  }

  public uint refCounter() {
    uint ret = movelladot_pc_sdkPINVOKE.XsDotUsbDevice_refCounter(swigCPtr);
    return ret;
  }

  public void clearXsDotCallbackHandlers(bool chain) {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_clearXsDotCallbackHandlers__SWIG_0(swigCPtr, chain);
  }

  public void clearXsDotCallbackHandlers() {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_clearXsDotCallbackHandlers__SWIG_1(swigCPtr);
  }

  public void addXsDotCallbackHandler(XsDotCallbackPlainC cb, bool chain) {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_addXsDotCallbackHandler__SWIG_0(swigCPtr, XsDotCallbackPlainC.getCPtr(cb), chain);
  }

  public void addXsDotCallbackHandler(XsDotCallbackPlainC cb) {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_addXsDotCallbackHandler__SWIG_1(swigCPtr, XsDotCallbackPlainC.getCPtr(cb));
  }

  public void removeXsDotCallbackHandler(XsDotCallbackPlainC cb, bool chain) {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_removeXsDotCallbackHandler__SWIG_0(swigCPtr, XsDotCallbackPlainC.getCPtr(cb), chain);
  }

  public void removeXsDotCallbackHandler(XsDotCallbackPlainC cb) {
    movelladot_pc_sdkPINVOKE.XsDotUsbDevice_removeXsDotCallbackHandler__SWIG_1(swigCPtr, XsDotCallbackPlainC.getCPtr(cb));
  }

  public XsDotUsbDevice(XsDotUsbDevice p) : this(movelladot_pc_sdkPINVOKE.new_XsDotUsbDevice(XsDotUsbDevice.getCPtr(p)), true) {
  }

}

}
