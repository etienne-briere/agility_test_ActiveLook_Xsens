
//  WARNING: COPYRIGHT (C) 2023 MOVELLA TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO A RESTRICTED LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MovellaDotPcSdk {

public class XsPortInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsPortInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsPortInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsPortInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          movelladot_pc_sdkPINVOKE.delete_XsPortInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsPortInfo() : this(movelladot_pc_sdkPINVOKE.new_XsPortInfo__SWIG_0(), true) {
  }

  public XsPortInfo(XsString portname, XsBaudRate baudRate, XsPortLinesOptions linesOptions) : this(movelladot_pc_sdkPINVOKE.new_XsPortInfo__SWIG_1(XsString.getCPtr(portname), (int)baudRate, (int)linesOptions), true) {
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsPortInfo(XsString portname, XsBaudRate baudRate) : this(movelladot_pc_sdkPINVOKE.new_XsPortInfo__SWIG_2(XsString.getCPtr(portname), (int)baudRate), true) {
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsPortInfo(XsString portname) : this(movelladot_pc_sdkPINVOKE.new_XsPortInfo__SWIG_3(XsString.getCPtr(portname)), true) {
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsPortInfo(int portNr, XsBaudRate baudRate, XsPortLinesOptions linesOptions) : this(movelladot_pc_sdkPINVOKE.new_XsPortInfo__SWIG_4(portNr, (int)baudRate, (int)linesOptions), true) {
  }

  public XsPortInfo(int portNr, XsBaudRate baudRate) : this(movelladot_pc_sdkPINVOKE.new_XsPortInfo__SWIG_5(portNr, (int)baudRate), true) {
  }

  public XsPortInfo(int portNr) : this(movelladot_pc_sdkPINVOKE.new_XsPortInfo__SWIG_6(portNr), true) {
  }

  public void clear() {
    movelladot_pc_sdkPINVOKE.XsPortInfo_clear(swigCPtr);
  }

  public bool empty() {
    bool ret = movelladot_pc_sdkPINVOKE.XsPortInfo_empty(swigCPtr);
    return ret;
  }

  public int portNumber() {
    int ret = movelladot_pc_sdkPINVOKE.XsPortInfo_portNumber(swigCPtr);
    return ret;
  }

  public XsString portName() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsPortInfo_portName(swigCPtr), true);
    return ret;
  }

  public string portName_c_str() {
    string ret = movelladot_pc_sdkPINVOKE.XsPortInfo_portName_c_str(swigCPtr);
    return ret;
  }

  public void setPortName(XsString portName_) {
    movelladot_pc_sdkPINVOKE.XsPortInfo_setPortName(swigCPtr, XsString.getCPtr(portName_));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isUsb() {
    bool ret = movelladot_pc_sdkPINVOKE.XsPortInfo_isUsb(swigCPtr);
    return ret;
  }

  public bool isBluetooth() {
    bool ret = movelladot_pc_sdkPINVOKE.XsPortInfo_isBluetooth(swigCPtr);
    return ret;
  }

  public bool isNetwork() {
    bool ret = movelladot_pc_sdkPINVOKE.XsPortInfo_isNetwork(swigCPtr);
    return ret;
  }

  public XsString networkServiceName() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsPortInfo_networkServiceName(swigCPtr), true);
    return ret;
  }

  public XsString bluetoothAddress() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsPortInfo_bluetoothAddress(swigCPtr), true);
    return ret;
  }

  public int usbBus() {
    int ret = movelladot_pc_sdkPINVOKE.XsPortInfo_usbBus(swigCPtr);
    return ret;
  }

  public int usbAddress() {
    int ret = movelladot_pc_sdkPINVOKE.XsPortInfo_usbAddress(swigCPtr);
    return ret;
  }

  public XsBaudRate baudrate() {
    XsBaudRate ret = (XsBaudRate)movelladot_pc_sdkPINVOKE.XsPortInfo_baudrate(swigCPtr);
    return ret;
  }

  public void setBaudrate(XsBaudRate baudrate_) {
    movelladot_pc_sdkPINVOKE.XsPortInfo_setBaudrate(swigCPtr, (int)baudrate_);
  }

  public XsDeviceId deviceId() {
    XsDeviceId ret = new XsDeviceId(movelladot_pc_sdkPINVOKE.XsPortInfo_deviceId(swigCPtr), true);
    return ret;
  }

  public void setDeviceId(XsDeviceId deviceId_) {
    movelladot_pc_sdkPINVOKE.XsPortInfo_setDeviceId(swigCPtr, XsDeviceId.getCPtr(deviceId_));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsPortLinesOptions linesOptions() {
    XsPortLinesOptions ret = (XsPortLinesOptions)movelladot_pc_sdkPINVOKE.XsPortInfo_linesOptions(swigCPtr);
    return ret;
  }

  public void setLinesOptions(XsPortLinesOptions linesOptions) {
    movelladot_pc_sdkPINVOKE.XsPortInfo_setLinesOptions(swigCPtr, (int)linesOptions);
  }

  public void getVidPid(SWIGTYPE_p_unsigned_short vid, SWIGTYPE_p_unsigned_short pid) {
    movelladot_pc_sdkPINVOKE.XsPortInfo_getVidPid(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(vid), SWIGTYPE_p_unsigned_short.getCPtr(pid));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVidPid(ushort vid, ushort pid) {
    movelladot_pc_sdkPINVOKE.XsPortInfo_setVidPid(swigCPtr, vid, pid);
  }

}

}
