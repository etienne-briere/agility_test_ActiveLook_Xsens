
//  WARNING: COPYRIGHT (C) 2023 MOVELLA TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO A RESTRICTED LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MovellaDotPcSdk {

public class XsMessageArrayImpl : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsMessageArrayImpl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsMessageArrayImpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsMessageArrayImpl() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          movelladot_pc_sdkPINVOKE.delete_XsMessageArrayImpl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsMessageArrayImpl(uint count, XsMessage src) : this(movelladot_pc_sdkPINVOKE.new_XsMessageArrayImpl__SWIG_0(count, XsMessage.getCPtr(src)), true) {
  }

  public XsMessageArrayImpl(uint count) : this(movelladot_pc_sdkPINVOKE.new_XsMessageArrayImpl__SWIG_1(count), true) {
  }

  public XsMessageArrayImpl() : this(movelladot_pc_sdkPINVOKE.new_XsMessageArrayImpl__SWIG_2(), true) {
  }

  public XsMessageArrayImpl(XsMessageArrayImpl other) : this(movelladot_pc_sdkPINVOKE.new_XsMessageArrayImpl__SWIG_3(XsMessageArrayImpl.getCPtr(other)), true) {
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsMessageArrayImpl(XsMessage ref_, uint sz, XsDataFlags flags) : this(movelladot_pc_sdkPINVOKE.new_XsMessageArrayImpl__SWIG_4(XsMessage.getCPtr(ref_), sz, (int)flags), true) {
  }

  public void clear() {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_clear(swigCPtr);
  }

  public void reserve(uint count) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_reserve(swigCPtr, count);
  }

  public uint reserved() {
    uint ret = movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_reserved(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_XsArrayDescriptor descriptor() {
    SWIGTYPE_p_XsArrayDescriptor ret = new SWIGTYPE_p_XsArrayDescriptor(movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_descriptor(swigCPtr), false);
    return ret;
  }

  public XsMessage value(uint index) {
    XsMessage ret = new XsMessage(movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_value(swigCPtr, index), true);
    return ret;
  }

  public XsMessage first() {
    XsMessage ret = new XsMessage(movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_first(swigCPtr), true);
    return ret;
  }

  public XsMessage last() {
    XsMessage ret = new XsMessage(movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_last(swigCPtr), true);
    return ret;
  }

  public XsMessage at(uint index) {
    XsMessage ret = new XsMessage(movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_at__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public void insert(XsMessage item, uint index) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_insert__SWIG_0(swigCPtr, XsMessage.getCPtr(item), index);
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public void insert(XsMessage items, uint index, uint count) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_insert__SWIG_1(swigCPtr, XsMessage.getCPtr(items), index, count);
  }

  public void push_back(XsMessage item) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_push_back(swigCPtr, XsMessage.getCPtr(item));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_back(uint count) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_pop_back__SWIG_0(swigCPtr, count);
  }

  public void pop_back() {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_pop_back__SWIG_1(swigCPtr);
  }

  public void push_front(XsMessage item) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_push_front(swigCPtr, XsMessage.getCPtr(item));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_front(uint count) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_pop_front__SWIG_0(swigCPtr, count);
  }

  public void pop_front() {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_pop_front__SWIG_1(swigCPtr);
  }

  public uint size() {
    uint ret = movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_size(swigCPtr);
    return ret;
  }

  public void erase(uint index, uint count) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_erase__SWIG_0(swigCPtr, index, count);
  }

  public void erase(uint index) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_erase__SWIG_1(swigCPtr, index);
  }

  public void assign(uint count, XsMessage src) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_assign(swigCPtr, count, XsMessage.getCPtr(src));
  }

  public void resize(uint count) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_resize(swigCPtr, count);
  }

  public void setSize(uint count) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_setSize(swigCPtr, count);
  }

  public void append(XsMessageArrayImpl other) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_append(swigCPtr, XsMessageArrayImpl.getCPtr(other));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_empty(swigCPtr);
    return ret;
  }

  public bool badAlloc() {
    bool ret = movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_badAlloc(swigCPtr);
    return ret;
  }

  public void swap(XsMessageArrayImpl other) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_swap__SWIG_0(swigCPtr, XsMessageArrayImpl.getCPtr(other));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap(uint a, uint b) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_swap__SWIG_1(swigCPtr, a, b);
  }

  public SWIGTYPE_p_ptrdiff_t find(XsMessage needle) {
    SWIGTYPE_p_ptrdiff_t ret = new SWIGTYPE_p_ptrdiff_t(movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_find(swigCPtr, XsMessage.getCPtr(needle)), true);
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(XsMessage needle) {
    bool ret = movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_contains(swigCPtr, XsMessage.getCPtr(needle));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeDuplicates() {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_removeDuplicates(swigCPtr);
  }

  public void removeDuplicatesPredicate(SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int predicate) {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_removeDuplicatesPredicate(swigCPtr, SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int.getCPtr(predicate));
  }

  public void sort() {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_sort(swigCPtr);
  }

  public void reverse() {
    movelladot_pc_sdkPINVOKE.XsMessageArrayImpl_reverse(swigCPtr);
  }

}

}
