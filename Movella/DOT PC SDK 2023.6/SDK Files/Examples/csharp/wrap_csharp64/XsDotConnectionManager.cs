
//  WARNING: COPYRIGHT (C) 2023 MOVELLA TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO A RESTRICTED LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MovellaDotPcSdk {

public class XsDotConnectionManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsDotConnectionManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsDotConnectionManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsDotConnectionManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          movelladot_pc_sdkPINVOKE.delete_XsDotConnectionManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static XsDotConnectionManager construct() {
    global::System.IntPtr cPtr = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_construct();
    XsDotConnectionManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDotConnectionManager(cPtr, false);
    return ret;
  }

  public void destruct() {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_destruct(swigCPtr);
  }

  public static XsVersion version() {
    XsVersion ret = new XsVersion(movelladot_pc_sdkPINVOKE.XsDotConnectionManager_version(), true);
    return ret;
  }

  public void reset() {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_reset(swigCPtr);
  }

  public XsStringArray getAvailableBluetoothAdapters() {
    XsStringArray ret = new XsStringArray(movelladot_pc_sdkPINVOKE.XsDotConnectionManager_getAvailableBluetoothAdapters(swigCPtr), true);
    return ret;
  }

  public bool setPreferredBluetoothAdapter(XsString adapterName) {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_setPreferredBluetoothAdapter(swigCPtr, XsString.getCPtr(adapterName));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool enableDeviceDetection() {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_enableDeviceDetection(swigCPtr);
    return ret;
  }

  public void disableDeviceDetection() {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_disableDeviceDetection(swigCPtr);
  }

  public XsPortInfoArray detectUsbDevices() {
    XsPortInfoArray ret = new XsPortInfoArray(movelladot_pc_sdkPINVOKE.XsDotConnectionManager_detectUsbDevices(swigCPtr), true);
    return ret;
  }

  public bool openPort(XsPortInfo portinfo) {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_openPort(swigCPtr, XsPortInfo.getCPtr(portinfo));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void closePort(XsPortInfo portinfo) {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_closePort(swigCPtr, XsPortInfo.getCPtr(portinfo));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsDotDevice device(XsDeviceId deviceId) {
    global::System.IntPtr cPtr = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_device(swigCPtr, XsDeviceId.getCPtr(deviceId));
    XsDotDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDotDevice(cPtr, false);
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsDotUsbDevice usbDevice(XsDeviceId deviceId) {
    global::System.IntPtr cPtr = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_usbDevice(swigCPtr, XsDeviceId.getCPtr(deviceId));
    XsDotUsbDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDotUsbDevice(cPtr, false);
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void close() {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_close(swigCPtr);
  }

  public XsResultValue lastResult() {
    XsResultValue ret = (XsResultValue)movelladot_pc_sdkPINVOKE.XsDotConnectionManager_lastResult(swigCPtr);
    return ret;
  }

  public XsString lastResultText() {
    XsString ret = new XsString(movelladot_pc_sdkPINVOKE.XsDotConnectionManager_lastResultText(swigCPtr), true);
    return ret;
  }

  public bool startLogging() {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_startLogging(swigCPtr);
    return ret;
  }

  public bool stopLogging() {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_stopLogging(swigCPtr);
    return ret;
  }

  public bool closeLogFile() {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_closeLogFile(swigCPtr);
    return ret;
  }

  public bool startSync(XsString rootNodeMac) {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_startSync(swigCPtr, XsString.getCPtr(rootNodeMac));
    if (movelladot_pc_sdkPINVOKE.SWIGPendingException.Pending) throw movelladot_pc_sdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool stopSync() {
    bool ret = movelladot_pc_sdkPINVOKE.XsDotConnectionManager_stopSync(swigCPtr);
    return ret;
  }

  public void clearXsDotCallbackHandlers(bool chain) {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_clearXsDotCallbackHandlers__SWIG_0(swigCPtr, chain);
  }

  public void clearXsDotCallbackHandlers() {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_clearXsDotCallbackHandlers__SWIG_1(swigCPtr);
  }

  public void addXsDotCallbackHandler(XsDotCallbackPlainC cb, bool chain) {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_addXsDotCallbackHandler__SWIG_0(swigCPtr, XsDotCallbackPlainC.getCPtr(cb), chain);
  }

  public void addXsDotCallbackHandler(XsDotCallbackPlainC cb) {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_addXsDotCallbackHandler__SWIG_1(swigCPtr, XsDotCallbackPlainC.getCPtr(cb));
  }

  public void removeXsDotCallbackHandler(XsDotCallbackPlainC cb, bool chain) {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_removeXsDotCallbackHandler__SWIG_0(swigCPtr, XsDotCallbackPlainC.getCPtr(cb), chain);
  }

  public void removeXsDotCallbackHandler(XsDotCallbackPlainC cb) {
    movelladot_pc_sdkPINVOKE.XsDotConnectionManager_removeXsDotCallbackHandler__SWIG_1(swigCPtr, XsDotCallbackPlainC.getCPtr(cb));
  }

  public XsDotConnectionManager() : this(movelladot_pc_sdkPINVOKE.new_XsDotConnectionManager(), true) {
  }

}

}
