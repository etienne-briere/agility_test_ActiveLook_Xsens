
//  WARNING: COPYRIGHT (C) 2023 MOVELLA TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO A RESTRICTED LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MovellaDotPcSdk {

public class XsDotCallback : XsDotCallbackPlainC {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal XsDotCallback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(movelladot_pc_sdkPINVOKE.XsDotCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsDotCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          movelladot_pc_sdkPINVOKE.delete_XsDotCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public XsDotCallback() : this(movelladot_pc_sdkPINVOKE.new_XsDotCallback(), true) {
    SwigDirectorConnect();
  }

  protected virtual void onAdvertisementFound(XsPortInfo portInfo) {
    if (SwigDerivedClassHasMethod("onAdvertisementFound", swigMethodTypes0)) movelladot_pc_sdkPINVOKE.XsDotCallback_onAdvertisementFoundSwigExplicitXsDotCallback(swigCPtr, XsPortInfo.getCPtr(portInfo)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onAdvertisementFound(swigCPtr, XsPortInfo.getCPtr(portInfo));
  }

  protected virtual void onBatteryUpdated(XsDotDevice device, int batteryLevel, int chargingStatus) {
    if (SwigDerivedClassHasMethod("onBatteryUpdated", swigMethodTypes1)) movelladot_pc_sdkPINVOKE.XsDotCallback_onBatteryUpdatedSwigExplicitXsDotCallback(swigCPtr, XsDotDevice.getCPtr(device), batteryLevel, chargingStatus); else movelladot_pc_sdkPINVOKE.XsDotCallback_onBatteryUpdated(swigCPtr, XsDotDevice.getCPtr(device), batteryLevel, chargingStatus);
  }

  protected virtual void onLiveDataAvailable(XsDotDevice device, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onLiveDataAvailable", swigMethodTypes2)) movelladot_pc_sdkPINVOKE.XsDotCallback_onLiveDataAvailableSwigExplicitXsDotCallback(swigCPtr, XsDotDevice.getCPtr(device), XsDataPacket.getCPtr(packet)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onLiveDataAvailable(swigCPtr, XsDotDevice.getCPtr(device), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onProgressUpdated(XsDotDevice device, int current, int total, XsString identifier) {
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes3)) movelladot_pc_sdkPINVOKE.XsDotCallback_onProgressUpdatedSwigExplicitXsDotCallback__SWIG_0(swigCPtr, XsDotDevice.getCPtr(device), current, total, XsString.getCPtr(identifier)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onProgressUpdated__SWIG_0(swigCPtr, XsDotDevice.getCPtr(device), current, total, XsString.getCPtr(identifier));
  }

  protected virtual void onDeviceUpdateDone(XsPortInfo portInfo, XsDotFirmwareUpdateResult result) {
    if (SwigDerivedClassHasMethod("onDeviceUpdateDone", swigMethodTypes4)) movelladot_pc_sdkPINVOKE.XsDotCallback_onDeviceUpdateDoneSwigExplicitXsDotCallback(swigCPtr, XsPortInfo.getCPtr(portInfo), (int)result); else movelladot_pc_sdkPINVOKE.XsDotCallback_onDeviceUpdateDone(swigCPtr, XsPortInfo.getCPtr(portInfo), (int)result);
  }

  protected virtual void onError(XsResultValue result, XsString error) {
    if (SwigDerivedClassHasMethod("onError", swigMethodTypes5)) movelladot_pc_sdkPINVOKE.XsDotCallback_onErrorSwigExplicitXsDotCallback(swigCPtr, (int)result, XsString.getCPtr(error)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onError(swigCPtr, (int)result, XsString.getCPtr(error));
  }

  protected virtual void onRecordingStopped(XsDotDevice device) {
    if (SwigDerivedClassHasMethod("onRecordingStopped", swigMethodTypes6)) movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordingStoppedSwigExplicitXsDotCallback(swigCPtr, XsDotDevice.getCPtr(device)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordingStopped(swigCPtr, XsDotDevice.getCPtr(device));
  }

  protected virtual void onDeviceStateChanged(XsDotDevice dev, XsDeviceState newState, XsDeviceState oldState) {
    if (SwigDerivedClassHasMethod("onDeviceStateChanged", swigMethodTypes7)) movelladot_pc_sdkPINVOKE.XsDotCallback_onDeviceStateChangedSwigExplicitXsDotCallback(swigCPtr, XsDotDevice.getCPtr(dev), (int)newState, (int)oldState); else movelladot_pc_sdkPINVOKE.XsDotCallback_onDeviceStateChanged(swigCPtr, XsDotDevice.getCPtr(dev), (int)newState, (int)oldState);
  }

  protected virtual void onButtonClicked(XsDotDevice dev, uint timestamp) {
    if (SwigDerivedClassHasMethod("onButtonClicked", swigMethodTypes8)) movelladot_pc_sdkPINVOKE.XsDotCallback_onButtonClickedSwigExplicitXsDotCallback(swigCPtr, XsDotDevice.getCPtr(dev), timestamp); else movelladot_pc_sdkPINVOKE.XsDotCallback_onButtonClicked(swigCPtr, XsDotDevice.getCPtr(dev), timestamp);
  }

  protected virtual void onRecordedDataAvailable(XsDotDevice device, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onRecordedDataAvailable", swigMethodTypes9)) movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordedDataAvailableSwigExplicitXsDotCallback__SWIG_0(swigCPtr, XsDotDevice.getCPtr(device), XsDataPacket.getCPtr(packet)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordedDataAvailable__SWIG_0(swigCPtr, XsDotDevice.getCPtr(device), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onRecordedDataDone(XsDotDevice device) {
    if (SwigDerivedClassHasMethod("onRecordedDataDone", swigMethodTypes10)) movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordedDataDoneSwigExplicitXsDotCallback__SWIG_0(swigCPtr, XsDotDevice.getCPtr(device)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordedDataDone__SWIG_0(swigCPtr, XsDotDevice.getCPtr(device));
  }

  protected virtual void onProgressUpdated(XsDotUsbDevice device, int current, int total, XsString identifier) {
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes11)) movelladot_pc_sdkPINVOKE.XsDotCallback_onProgressUpdatedSwigExplicitXsDotCallback__SWIG_1(swigCPtr, XsDotUsbDevice.getCPtr(device), current, total, XsString.getCPtr(identifier)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onProgressUpdated__SWIG_1(swigCPtr, XsDotUsbDevice.getCPtr(device), current, total, XsString.getCPtr(identifier));
  }

  protected virtual void onRecordedDataAvailable(XsDotUsbDevice device, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onRecordedDataAvailable", swigMethodTypes12)) movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordedDataAvailableSwigExplicitXsDotCallback__SWIG_1(swigCPtr, XsDotUsbDevice.getCPtr(device), XsDataPacket.getCPtr(packet)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordedDataAvailable__SWIG_1(swigCPtr, XsDotUsbDevice.getCPtr(device), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onRecordedDataDone(XsDotUsbDevice device) {
    if (SwigDerivedClassHasMethod("onRecordedDataDone", swigMethodTypes13)) movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordedDataDoneSwigExplicitXsDotCallback__SWIG_1(swigCPtr, XsDotUsbDevice.getCPtr(device)); else movelladot_pc_sdkPINVOKE.XsDotCallback_onRecordedDataDone__SWIG_1(swigCPtr, XsDotUsbDevice.getCPtr(device));
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onAdvertisementFound", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateXsDotCallback_0(SwigDirectorMethodonAdvertisementFound);
    if (SwigDerivedClassHasMethod("onBatteryUpdated", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateXsDotCallback_1(SwigDirectorMethodonBatteryUpdated);
    if (SwigDerivedClassHasMethod("onLiveDataAvailable", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateXsDotCallback_2(SwigDirectorMethodonLiveDataAvailable);
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateXsDotCallback_3(SwigDirectorMethodonProgressUpdated__SWIG_0);
    if (SwigDerivedClassHasMethod("onDeviceUpdateDone", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateXsDotCallback_4(SwigDirectorMethodonDeviceUpdateDone);
    if (SwigDerivedClassHasMethod("onError", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateXsDotCallback_5(SwigDirectorMethodonError);
    if (SwigDerivedClassHasMethod("onRecordingStopped", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateXsDotCallback_6(SwigDirectorMethodonRecordingStopped);
    if (SwigDerivedClassHasMethod("onDeviceStateChanged", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateXsDotCallback_7(SwigDirectorMethodonDeviceStateChanged);
    if (SwigDerivedClassHasMethod("onButtonClicked", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateXsDotCallback_8(SwigDirectorMethodonButtonClicked);
    if (SwigDerivedClassHasMethod("onRecordedDataAvailable", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateXsDotCallback_9(SwigDirectorMethodonRecordedDataAvailable__SWIG_0);
    if (SwigDerivedClassHasMethod("onRecordedDataDone", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateXsDotCallback_10(SwigDirectorMethodonRecordedDataDone__SWIG_0);
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateXsDotCallback_11(SwigDirectorMethodonProgressUpdated__SWIG_1);
    if (SwigDerivedClassHasMethod("onRecordedDataAvailable", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateXsDotCallback_12(SwigDirectorMethodonRecordedDataAvailable__SWIG_1);
    if (SwigDerivedClassHasMethod("onRecordedDataDone", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateXsDotCallback_13(SwigDirectorMethodonRecordedDataDone__SWIG_1);
    movelladot_pc_sdkPINVOKE.XsDotCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(XsDotCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodonAdvertisementFound(global::System.IntPtr portInfo) {
    onAdvertisementFound((portInfo == global::System.IntPtr.Zero) ? null : new XsPortInfo(portInfo, false));
  }

  private void SwigDirectorMethodonBatteryUpdated(global::System.IntPtr device, int batteryLevel, int chargingStatus) {
    onBatteryUpdated((device == global::System.IntPtr.Zero) ? null : new XsDotDevice(device, false), batteryLevel, chargingStatus);
  }

  private void SwigDirectorMethodonLiveDataAvailable(global::System.IntPtr device, global::System.IntPtr packet) {
    onLiveDataAvailable((device == global::System.IntPtr.Zero) ? null : new XsDotDevice(device, false), (packet == global::System.IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectorMethodonProgressUpdated__SWIG_0(global::System.IntPtr device, int current, int total, global::System.IntPtr identifier) {
    onProgressUpdated((device == global::System.IntPtr.Zero) ? null : new XsDotDevice(device, false), current, total, (identifier == global::System.IntPtr.Zero) ? null : new XsString(identifier, false));
  }

  private void SwigDirectorMethodonDeviceUpdateDone(global::System.IntPtr portInfo, int result) {
    onDeviceUpdateDone((portInfo == global::System.IntPtr.Zero) ? null : new XsPortInfo(portInfo, false), (XsDotFirmwareUpdateResult)result);
  }

  private void SwigDirectorMethodonError(int result, global::System.IntPtr error) {
    onError((XsResultValue)result, (error == global::System.IntPtr.Zero) ? null : new XsString(error, false));
  }

  private void SwigDirectorMethodonRecordingStopped(global::System.IntPtr device) {
    onRecordingStopped((device == global::System.IntPtr.Zero) ? null : new XsDotDevice(device, false));
  }

  private void SwigDirectorMethodonDeviceStateChanged(global::System.IntPtr dev, int newState, int oldState) {
    onDeviceStateChanged((dev == global::System.IntPtr.Zero) ? null : new XsDotDevice(dev, false), (XsDeviceState)newState, (XsDeviceState)oldState);
  }

  private void SwigDirectorMethodonButtonClicked(global::System.IntPtr dev, uint timestamp) {
    onButtonClicked((dev == global::System.IntPtr.Zero) ? null : new XsDotDevice(dev, false), timestamp);
  }

  private void SwigDirectorMethodonRecordedDataAvailable__SWIG_0(global::System.IntPtr device, global::System.IntPtr packet) {
    onRecordedDataAvailable((device == global::System.IntPtr.Zero) ? null : new XsDotDevice(device, false), (packet == global::System.IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectorMethodonRecordedDataDone__SWIG_0(global::System.IntPtr device) {
    onRecordedDataDone((device == global::System.IntPtr.Zero) ? null : new XsDotDevice(device, false));
  }

  private void SwigDirectorMethodonProgressUpdated__SWIG_1(global::System.IntPtr device, int current, int total, global::System.IntPtr identifier) {
    onProgressUpdated((device == global::System.IntPtr.Zero) ? null : new XsDotUsbDevice(device, false), current, total, (identifier == global::System.IntPtr.Zero) ? null : new XsString(identifier, false));
  }

  private void SwigDirectorMethodonRecordedDataAvailable__SWIG_1(global::System.IntPtr device, global::System.IntPtr packet) {
    onRecordedDataAvailable((device == global::System.IntPtr.Zero) ? null : new XsDotUsbDevice(device, false), (packet == global::System.IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectorMethodonRecordedDataDone__SWIG_1(global::System.IntPtr device) {
    onRecordedDataDone((device == global::System.IntPtr.Zero) ? null : new XsDotUsbDevice(device, false));
  }

  public delegate void SwigDelegateXsDotCallback_0(global::System.IntPtr portInfo);
  public delegate void SwigDelegateXsDotCallback_1(global::System.IntPtr device, int batteryLevel, int chargingStatus);
  public delegate void SwigDelegateXsDotCallback_2(global::System.IntPtr device, global::System.IntPtr packet);
  public delegate void SwigDelegateXsDotCallback_3(global::System.IntPtr device, int current, int total, global::System.IntPtr identifier);
  public delegate void SwigDelegateXsDotCallback_4(global::System.IntPtr portInfo, int result);
  public delegate void SwigDelegateXsDotCallback_5(int result, global::System.IntPtr error);
  public delegate void SwigDelegateXsDotCallback_6(global::System.IntPtr device);
  public delegate void SwigDelegateXsDotCallback_7(global::System.IntPtr dev, int newState, int oldState);
  public delegate void SwigDelegateXsDotCallback_8(global::System.IntPtr dev, uint timestamp);
  public delegate void SwigDelegateXsDotCallback_9(global::System.IntPtr device, global::System.IntPtr packet);
  public delegate void SwigDelegateXsDotCallback_10(global::System.IntPtr device);
  public delegate void SwigDelegateXsDotCallback_11(global::System.IntPtr device, int current, int total, global::System.IntPtr identifier);
  public delegate void SwigDelegateXsDotCallback_12(global::System.IntPtr device, global::System.IntPtr packet);
  public delegate void SwigDelegateXsDotCallback_13(global::System.IntPtr device);

  private SwigDelegateXsDotCallback_0 swigDelegate0;
  private SwigDelegateXsDotCallback_1 swigDelegate1;
  private SwigDelegateXsDotCallback_2 swigDelegate2;
  private SwigDelegateXsDotCallback_3 swigDelegate3;
  private SwigDelegateXsDotCallback_4 swigDelegate4;
  private SwigDelegateXsDotCallback_5 swigDelegate5;
  private SwigDelegateXsDotCallback_6 swigDelegate6;
  private SwigDelegateXsDotCallback_7 swigDelegate7;
  private SwigDelegateXsDotCallback_8 swigDelegate8;
  private SwigDelegateXsDotCallback_9 swigDelegate9;
  private SwigDelegateXsDotCallback_10 swigDelegate10;
  private SwigDelegateXsDotCallback_11 swigDelegate11;
  private SwigDelegateXsDotCallback_12 swigDelegate12;
  private SwigDelegateXsDotCallback_13 swigDelegate13;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(XsPortInfo) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(XsDotDevice), typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(XsDotDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(XsDotDevice), typeof(int), typeof(int), typeof(XsString) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(XsPortInfo), typeof(XsDotFirmwareUpdateResult) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(XsResultValue), typeof(XsString) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(XsDotDevice) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(XsDotDevice), typeof(XsDeviceState), typeof(XsDeviceState) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(XsDotDevice), typeof(uint) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(XsDotDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(XsDotDevice) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(XsDotUsbDevice), typeof(int), typeof(int), typeof(XsString) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(XsDotUsbDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(XsDotUsbDevice) };
}

}
